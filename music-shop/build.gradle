plugins {
//    id 'com.github.kt3k.coveralls' version '2.8.4'
//    id 'jacoco'
    id "io.spring.dependency-management" version "1.0.8.RELEASE"
    id "org.springframework.boot" version "2.2.2.RELEASE"
//    id 'java'
}

//bootJar {
//    enabled = false
//}
//
//jar {
//    enabled = true
//}

allprojects {
    group = 'com.epam.brest.summer.courses2019'
    version = '1.0-SNAPSHOT'
}

repositories {
    mavenLocal()
    jcenter()
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'java-library'
    apply plugin: 'idea'
    apply plugin: 'jacoco'
    apply plugin: 'maven-publish'
    apply plugin: 'io.spring.dependency-management'

    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

//    task fatJar(type: Jar) {
//        manifest {
//            attributes 'Main-Class':'com.epam.brest.summer.courses2019.rest_app.RestApplication'
//        }
//        from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
//        with jar
//    }

    repositories {
        mavenLocal()
        jcenter()
    }

    dependencyManagement {
        imports {
            mavenBom "org.springframework.boot:spring-boot-dependencies:2.2.2.RELEASE"
        }
    }

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-jdbc'

        runtimeOnly 'com.h2database:h2:1.4.199'

        testImplementation ('org.springframework.boot:spring-boot-starter-test'){
            exclude group: 'junit'
        }
    }

    publishing {
        publications {
            maven(MavenPublication) {
                from(components.java)
            }
        }
    }

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }
}

//task customJar(type: Jar) {
//    manifest {
//        attributes(
//                'Main-Class': 'com.epam.brest.summer.courses2019.rest_app.RestApplication',
//        )
//    }
//
//    from {
//        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
//    }
//}

//subprojects.each { subproject ->
//    evaluationDependsOn(subproject.path)
//}
//task mmJar(type: Jar, dependsOn: subprojects.jar) {
//    subprojects.each { subproject ->
//        from subproject.configurations.archives.artifacts.files.collect {
//            zipTree(it)
//        }
//    }
//}
//install.dependsOn mmJar